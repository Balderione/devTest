// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
public class WSHU03_MerchantTemplateWS {
    /*
----------------------------------------------------------------------
-- - Name          : WSHU03_MerchantTemplateWS
-- - Author        : AAB
-- - Description   : Define the Merchant Template for the web service        
-- Maintenance History:
--
-- Date         Name               Version     Remarks 
-- -----------  -----------        --------    ---------------------------------------
-- 28-FEB-2018  AAB                    1.0     Initial version
-- 20-NOV-2018  AAB                    2.0     Change made
- Add invoice center (add legal_name element)
- update merchant (for complex structure add parent merchant)
-- 22-FEB-2019  OLA                            Code review                                                           
---------------------------------------------------------------------------------------
*/
    
    public class sAccount {
        
        public List <Refs> refs {get;set;}
        public String legal_name {get;set;}
        public String commercial_name {get;set;}
        public Address address {get;set;}
        public String acronym {get;set;}
        public Bank_account bank_account {get;set;}
        public String comments {get;set;}
        public Refs parent_merchant_reference {get;set;}
        public List <Refs> children_merchant_references {get;set;}
        public String sector_category_ref {get;set;}
        public List <String> activity_sectors {get;set;}
        public List <String> activity_domains {get;set;}
        public String accounting_type {get;set;}
        public String vat_type {get;set;}
        public String legal_status_ref {get;set;}
        public List <Contacts> contacts {get;set;}
        public String default_language_ref {get;set;}
        public String created_date {get;set;}
        public String created_by {get;set;}
        public String modified_date {get;set;}
        public String modified_by {get;set;}
        public String insert_user_id {get;set;}
        public String old_registration_number {get;set;}
        public List <Invoice_centers> invoice_centers {get;set;}
        public List <Payment_centers> payment_centers {get;set;}
        public List <Stores> stores {get;set;}
        
        // Constructor from Account object to JSON    
        public sAccount(WSHU02_SynchronizeMerchantWS.wrapMerchant theAccount, Boolean isToInsert) {
            
            /* Authority required
* Define the system which is the origin of the identifier
* A system is define by its functional scope
* mdm : master data management system
* ds : distribution system
* fs : functional system
* os : operational system
*/
            this.refs = new List <refs> ();
            
            String mymerchantid = theAccount.merchant.Id;
            
            this.refs.add(new refs('ds.merchant.technical_id', mymerchantid/*.substring(10, 18)*/)); /* CRM Identifier -- required */ 
            
            // Dend only if simple merchant (one Financial center related)
            //if (theAccount.financialCenterW.size() == 1) { /* Is sent all the time for simple or complex merchant */
            this.refs.add(new refs('state.merchant.vat_number', theAccount.merchant.ER_VAT_Number__c)); /* Tax Identification Code -- required */
            //}
            this.legal_name = theAccount.merchant.Name; /* Retailer Name - required */
            this.commercial_name = ''; /* not needed */

            if (theAccount.merchant.ER_BUPicklist__c == 'CZ')
            {

                this.refs.add(new refs('state.merchant.registration_number', theAccount.merchant.ER_Registration_Number__c));    
                //this.created_by = 'login'; 
                this.created_by = UserInfo.getUserName();
                if (theAccount.merchant.BillingStreet != null && theAccount.merchant.BillingCity != null && theAccount.merchant.BillingPostalCode != null) {
                
                    this.address = new Address('', theAccount.merchant.BillingStreet, '',
                    theAccount.merchant.BillingCity, theAccount.merchant.BillingPostalCode, '',
                    '', '', 'CZE',
                    '', double.valueOf(theAccount.merchant.BillingLatitude), double.valueOf(theAccount.merchant.BillingLongitude));
                    //'', double.valueOf('49.8069'), double.valueOf('18.2941'));
                }
                this.invoice_centers = new List <Invoice_centers> ();
                this.stores = new List <Stores> ();
                 for (WSHU02_SynchronizeMerchantWS.wrapFinancialCenter finCent: theAccount.financialCenterW) {
                    this.invoice_centers.add(new Invoice_centers(finCent.financialCenter, finCent.financialCenter.ER_Contact__r, finCent.stores, finCent.bankAccount, true, false));
                    for (ER_Store__c store : finCent.stores) {
                        this.stores.add(new Stores(store));
                    }
                }
                this.bank_account = new Bank_account(theAccount.financialCenterW[0].bankAccount, true);
                this.legal_status_ref = 'legal status ref';
                this.contacts = new List <Contacts> ();
                //this.contacts.add(new Contacts(theAccount.contact_hq, 'Owner'));
                this.contacts.add(new Contacts(theAccount.merchant.HU_HQ_Contact__r, 'Owner'));
                this.created_date = '2016-02-28T16:41:41.090Z'; 
                this.insert_user_id = 'david.slezek@edenred.com'; //new 
                //this.insert_user_id = UserInfo.getUserEmail(); TBD!
                this.old_registration_number = '';
                
            }
            else if (theAccount.merchant.ER_BUPicklist__c == 'HU')
            {
            
            
            if (isToInsert) {
                this.refs.add(new refs('os-paper.merchant.technical_id', (theAccount.merchant.ER_Paper_Operational_System_ID__c != null) ? 
                                       theAccount.merchant.ER_Paper_Operational_System_ID__c : mymerchantid)); /* AS Retailer UID -- required */
            }
            
            /* Head Office Address */
            /* Address 1
* Address 2
* Address 3
* Town
* Post Code
* Country
*/
            if (theAccount.merchant.BillingStreet != null && theAccount.merchant.BillingCity != null && theAccount.merchant.BillingPostalCode != null) {
                
                this.address = new Address('', theAccount.merchant.BillingStreet, '',
                                           theAccount.merchant.BillingCity, theAccount.merchant.BillingPostalCode, '',
                                           '', '', 'HU',
                                           '', double.valueOf('48.819947'), double.valueOf('2.309554'));
            }
            
            
            this.acronym = '';
            this.comments = ''; /* Comments */
            
            this.sector_category_ref = 'primary'; /* not needed */
            this.activity_sectors = new List <String> ();
            this.activity_sectors.add('agri-food'); /* not needed */
            this.activity_sectors.add('distribution'); /* not needed */
            this.activity_domains = new List <String> ();
            
            
            //this.activity_domains.add(theAccount.merchant.HU_Retailer_Type__c); /* retailer Type */
            this.activity_domains.add('Food store'); /* retailer Type */
            this.activity_domains.add('');
            
            this.accounting_type = 'prepaid'; /* not needed */
            
            this.vat_type = 'liable'; /* Tax Reporting Type */
            
            this.legal_status_ref = 'legal status ref'; /* not needed */
            
            this.default_language_ref = 'HUN'; /* default value */
            
            
            
            /*if (theAccount.multipleInvoiceCenter) {
this.parent_merchant_reference = new refs('state.merchant.vat_number', theAccount.merchant.ER_VAT_Number__c); /* required if complex merchant (more than 1 Financial center related) */
            //this.parent_merchant_reference = new refs('state.merchant.vat_number', '33443966-2-13');
            //}
            //
            
            if (isToInsert) {
                if (theAccount.multipleInvoiceCenter) {
                    this.parent_merchant_reference = new refs('state.merchant.vat_number', theAccount.merchant.ER_VAT_Number__c); /* required if complex merchant (more than 1 Financial center related) */
                    //this.parent_merchant_reference = new refs('state.merchant.vat_number', '33443966-2-13');
                }
                
                this.bank_account = new Bank_account(theAccount.financialCenterW[0].bankAccount, true); /* required */
                
                
                this.children_merchant_references = new List <refs> ();
                this.children_merchant_references.add(new refs('mdm.merchant.technical_id', ''));
                
                this.created_by = 'login'; /* not needed */
                this.created_date = '2016-02-28T16:41:41.090Z'; /* not needed */
                
                
                /* Head Office Address -- Contact */
                this.contacts = new List <Contacts> ();
                
                this.contacts.add(new Contacts(theAccount.contact_hq, 'primary contact'));
                
                this.invoice_centers = new List <Invoice_centers> ();
                
                /* Loop through all the invoice centers -- Invoice Address */
                for (WSHU02_SynchronizeMerchantWS.wrapFinancialCenter finCent: theAccount.financialCenterW) {
                    this.invoice_centers.add(new Invoice_centers(finCent.financialCenter, finCent.contact_inv, finCent.stores, finCent.bankAccount, true, false));
                }
                
                // Store will be store whatever into the invoice center
            }else {
                this.modified_by = 'login'; /* not needed */
                this.modified_date = '2016-02-28T16:41:41.090Z'; /* not needed */
            }
            
            if (theAccount.multipleInvoiceCenter) {
                //this.parent_merchant_reference = new refs('state.merchant.vat_number', theAccount.merchant.ER_VAT_Number__c); /* required if complex merchant (more than 1 Financial center related) */
                //this.parent_merchant_reference = new refs('state.merchant.vat_number', '33443966-2-13');
            }
        }
        }
    }
    
    
    public class Personal_info {
        
        public String first_name {get;set;}
        public String middle_name {get;set;}
        public String last_name {get;set;}
        public String birth_date {get;set;}
        public String birth_place {get;set;}
        public String title {get;set;}
        public String profession_ref {get;set;}
        public String language_ref {get;set;}
        public Address address {get;set;}   
        
        public Personal_info(String firstName, String lastname, String salutation, String mailingStreet, String mailingCity, String mailingPostCode) {
            this.first_name = (firstName != null) ? firstName : 'firstnameismissing'; /* Contact Name -- optional */
            this.middle_name = '';
            this.last_name = (lastname != null) ? lastname : 'lastnameismissing'; /* Contact Name -- required */
            this.birth_date = '1975-01-01'; /* not needed */
            this.birth_place = 'Paris'; /* not needed */
            
            /* Possible values : mr/ms/mrs/dr/prof */
            this.title = (!String.isEmpty(salutation)) ? (salutation.removeEndIgnoreCase('.')).toLowerCase() : 'mr'; /* Title -- required */
            
            if (this.title == 'prof') {
                this.title = 'pr';
            }
            
            this.profession_ref = 'tdb'; /* not needed */
            this.language_ref = 'HUN'; /* default value */
            
            if (mailingStreet != null && mailingCity != null && mailingPostCode != null) {
                
                this.address = new Address('', mailingStreet, '',
                                           mailingCity, mailingPostCode, '',
                                           '', '', 'HU',
                                           '', double.valueOf('48.819947'), double.valueOf('2.309554'));
            }
            
        }
        
        public Personal_info(Contact ct) {

            this.first_name = (ct.FirstName != null) ? ct.FirstName : 'firstnameismissing'; /* Contact Name -- required */
            
            System.debug('--- APHU03_MerchantTemplateWS Personal_info : ' + ct.Phone);
            
            this.middle_name = '';
            
            this.last_name = (ct.LastName != null) ? ct.LastName : 'lastnameismissing'; /* Contact Name -- required */
            
            if(ct.ER_Business_Unit_2__c == 'HU')
            {
                
                this.birth_date = '1975-01-01'; /* not needed */
            
                this.birth_place = 'Paris'; /* not needed */
            
                /* Possible values : mr/ms/mrs/dr/prof */
                this.title = (!String.isEmpty(ct.Salutation)) ? (ct.Salutation.removeEndIgnoreCase('.')).toLowerCase() : 'mr'; /* Title -- required */
            
                if (this.title == 'prof') {
                    this.title = 'pr';
                }
            
                this.profession_ref = 'tdb'; /* not needed */
            
                this.language_ref = 'HUN'; /* default value */
            
                if (ct.MailingStreet != null && ct.MailingCity != null && ct.MailingPostalCode != null) {
                
                    this.address = new Address('', ct.MailingStreet != null ? ct.MailingStreet : '', '',
                                           ct.MailingCity != null ? ct.MailingCity : '', ct.MailingPostalCode != null ? ct.MailingPostalCode : '', '',
                                           '', '', 'HU',
                                           '', double.valueOf('48.819947'), double.valueOf('2.309554'));
                }
            }
            else if (ct.ER_Business_Unit_2__c == 'CZ')
            {

                this.title = (!String.isEmpty(ct.CZ_AcademicTitle__c)) ? (ct.CZ_AcademicTitle__c.removeEndIgnoreCase('.')).toLowerCase() : 'pan'; /* Title -- required */
            
                this.language_ref = 'CZE'; /* default value */
            
                if (ct.MailingStreet != null && ct.MailingCity != null && ct.MailingPostalCode != null) {
                
                    this.address = new Address('', ct.MailingStreet != null ? ct.MailingStreet : '', '',
                                           ct.MailingCity != null ? ct.MailingCity : '', ct.MailingPostalCode != null ? ct.MailingPostalCode : '', '',
                                           '', '', 'CZE',
                                           '', double.valueOf(ct.MailingLatitude), double.valueOf(ct.MailingLongitude));
                                           //'', double.valueOf('49.8069'), double.valueOf('18.2941'));
                }
            }
        }
        
        public Personal_info(String firstName, String lastname, String salutation) {
            this.first_name = (firstName != null) ? firstName : 'firstnameismissing'; /* Contact Name -- optional */
            this.last_name = (lastname != null) ? lastname : 'lastnameismissing'; /* Contact Name -- required */
            this.title = (!String.isEmpty(salutation)) ? (salutation.removeEndIgnoreCase('.')).toLowerCase() : 'mr'; /* Title -- required */     
        }
    }
    
    public class Address {
        
        public String building_number {get;set;}
        public String street {get;set;}
        public String street2 {get;set;}
        public String city {get;set;}
        public String zip_code {get;set;}
        public String postal_box {get;set;}
        public String district_code {get;set;}
        public String municipality {get;set;}
        public String country_ref {get;set;}
        public String additional_info {get;set;}
        public Double latitude {get;set;}
        public Double longitude {get;set;}
        
        public Address(String thebuilding_number, String thestreet, String thestreet2, String thecity,
                       String thezip_code, String thepostal_box, String thedistrict_code,
                       String themunicipality, String thecountry_ref, String theadditional_info,
                       Double thelatitude, Double thelongitude) {
                           this.building_number = thebuilding_number;
                           
                           this.street = (thestreet != null) ? thestreet : '';
                           this.street2 = (thestreet2 != null) ? thestreet2 : '';
                           this.city = thecity;
                           this.zip_code = thezip_code; /* Is limited to 10 characters */
                           this.postal_box = thepostal_box;
                           this.district_code = thedistrict_code;
                           this.municipality = themunicipality;
                           this.country_ref = thecountry_ref;
                           this.additional_info = theadditional_info;
                           this.latitude = thelatitude;
                           this.longitude = thelongitude;
                       }
        
        public Address(String thebuilding_number, String thestreet, String thestreet2, String thecity,
                       String thezip_code, String thecountry_ref, Double thelatitude, Double thelongitude) {
                           
                           this.building_number = thebuilding_number;
                           this.street = (thestreet != null) ? thestreet : '';
                           this.street2 = (thestreet2 != null) ? thestreet2 : '';
                           this.city = thecity;
                           this.zip_code = thezip_code; /* Is limited to 10 characters */
                           this.country_ref = thecountry_ref;
                           this.latitude = thelatitude;
                           this.longitude = thelongitude;
                       }
    }
    
    
    public class Contacts {
        
        public List <Refs> refs {get;set;}
        public String name {get;set;}
        public DateTime createdDate {get;set;}
        public String email {get;set;}
        public String phone_number {get;set;}
        public String mobile_number {get;set;}
        public String fax {get;set;}
        public String website {get;set;}
        public String contact_type_ref {get;set;}
        public String function_ref {get;set;}
        public Personal_info personal_info {get;set;}
        public String authority {get;set;}
        public String reference {get;set;}
        
        public Contacts(String contactfirstName, String contactLastName, String salutation,
                        String contactType, String faxNumber, 
                        String emailAdd, String phoneNumber, String mobileNumber,
                        String mailingStreet, String mailingCity, 
                        String mailingPostCode) {
                            system.debug('sdram 3.1');
                            this.refs = new List <Refs> ();
                            this.refs.add(new Refs('ds.contact.technical_id', ''));
                            system.debug('sdram 3.2');
                            this.name = 'EDG Team'; /* not needed */
                            this.email = (emailAdd != null) ? emailAdd : 'email@ismissing.com'; /* required */
                            system.debug('sdram 3.3');
                            
                            /* phone and fax have specific format so do not send right now */                 
                            this.phone_number = (phoneNumber != null) ? phoneNumber : phoneNumber; /* required */               
                            this.mobile_number = mobileNumber;
                            system.debug('sdram 3.4');
                            this.fax = (faxNumber != null) ? faxNumber : faxNumber; /* required */
                            system.debug('sdram 3.5');
                            this.website = 'www.edenred.com'; /**/
                            this.contact_type_ref = contactType;
                            this.function_ref = 'Manager';
                            system.debug('sdram 3.6');
                            this.personal_info = new Personal_info(contactfirstName, contactLastName, salutation, mailingStreet, mailingCity, mailingPostCode);
                            system.debug('sdram 3.7');
                        }
        
        
        
        public Contacts(Contact ct, String contactType) {
            
            this.refs = new List <Refs> ();
            this.refs.add(new Refs('ds.contact.technical_id', ct.id));
            
            this.name = 'EDG Team';
            
            this.email = (ct.Email != null) ? ct.Email : 'email@ismissing.com';
            
            this.phone_number =  (ct.Phone != null) ? ct.Phone : ct.Phone; /* required */
            this.mobile_number = ct.MobilePhone;
            
            this.fax = (ct.Fax != null) ? ct.Fax : ct.Fax; /* required */
            
            this.website = 'www.edenred.com';
            this.contact_type_ref = contactType;
            this.function_ref = 'Manager';
            this.personal_info = new Personal_info(ct);
            
            
        }
        
        public Contacts(String auth, String ref) {
            
            this.refs = new List <Refs> ();
            this.refs.add(new Refs(auth, ref)); 
        }
       
    }
   
    
    public class Refs {
        
        public String authority {get;set;}
        public String reference {get;set;}
        
        public Refs(String auth, String ref) {
            
            this.authority = auth;
            this.reference = ref;
        }
    }
    
    public class invoice_centers_refs {
        
        public String authority {get;set;}
        public String reference {get;set;}
        
        public invoice_centers_refs(String auth, String ref) {
            
            this.authority = auth;
            this.reference = ref;
        }
    }
    
    public class Payment_centers {
        
        public List <Refs> refs {get;set;}
        public String name {get;set;}
        public String inactivation_date {get;set;}
        public Bank_account bank_account {get;set;}
        public Address address {get;set;}
        public List <Contacts> contacts {get;set;}
        
        /*public Payment_centers(ER_Payment_Center__c pc) {
this.refs = new List <Refs> ();
this.refs.add(new Refs('mdm.paymentcenter.technical_id', '?'));
this.name = 'Payment center name';
this.inactivation_date = '2018-01-01';

this.address = new Address('178', 'boulevard Gabriel Péri', 'boulevard Gabriel Péri',
'Malakoff', '92240', '',
'', '', 'HU',
'additionalInfo1', double.valueOf('48.819947'), double.valueOf('2.309554'));
this.contacts = new List <Contacts> ();
}*/
    }
    
    public class Iban {
        
        public String country_code {get;set;}
        public String key_code {get;set;}
        public String bban {get;set;}
        
        public Iban(String iban, Boolean isToUpdate) {
            
            this.bban = iban;
            //this.country_code = 'CZ'; /* required for future use */
            if(iban.substring(0, 2)== 'CZ')
            {
                this.bban = iban.substring(2, iban.length());
                this.country_code = 'CZ';
            
            }

        }
    }
    
    
    
    public class Bank_account {
        
        public String bank_name {get;set;}
        public String bic {get;set;}
        public Iban iban {get;set;}
        
        public Bank_account(ER_Bank_Account__c theBankAccount, Boolean isToUpdate) {
            //this.bank_name = theBankAccount.ER_Bank_Name__c; /* required - predefined value -  is not required in CMO, neather in Salesforce - should not be in EDG to */
            //this.bank_name =  'BNP';
            /*this.bic = 'CCOPFRPPXXX';*/ /* required but not mapped */
            this.iban = new Iban(theBankAccount.ER_IBAN__c, isToUpdate); /* IBAN - required, 23 characters maximum -  8char-8char-8char*/
        }
    }
    
    
    
    public class Supported_products {
        
        public List<Refs> refs {get;set;}
        public String description {get;set;}
        
        /*  */ 
        public Supported_products(String description, String reference) {
            
            this.refs = new List <Refs> ();
            this.refs.add(new Refs('er.product.ref', reference)); /* required */
            
            this.description = reference;
        }
    }
    
    public class Acceptance_point {
        
        public List <Refs> refs {get;set;}
        public String name {get;set;}
        public String comments {get;set;}
        public String scheme_ref {get;set;}
        public Refs authorization_mid {get;set;}
        public Refs authorization_aid {get;set;}
        public Refs authorization_mcc {get;set;}
        public Refs authorization_tid {get;set;}
        public Refs clearing_mid {get;set;}
        public Refs clearing_aid {get;set;}
        public Refs clearing_mcc {get;set;}
        public Refs clearing_tid {get;set;}
        
        public List <Supported_products> supported_products {get;set;}
        
        /*  */  
        public Acceptance_point(ER_Acceptor__c anAcceptor, Boolean isUpdate) {
            
            System.debug('--- the list of acceptors : ' + anAcceptor);
            
            String theacceptor = anAcceptor.Id;

                this.refs = new List <Refs> ();
                this.refs.add(new Refs('ds.acceptancepoint.technical_id', anAcceptor.Id)); /* required */ 
                this.authorization_mid = new Refs('os-card.authorizationmid.technical_id', anAcceptor.ER_MID_Authorization__c); /* required */
                this.clearing_mid = new Refs('os-card.clearingmid.technical_id', (anAcceptor.ER_MID_Clearing__c != null) ? anAcceptor.ER_MID_Clearing__c : '');
                this.name = anAcceptor.Name;
                if (!isUpdate) {
                    
                    this.scheme_ref = 'Acceptance point ref';  
                    
                }

            if(anAcceptor.ER_Business_Unit__c == 'HU'){
                
                this.supported_products = new List <Supported_products> ();
                
                this.supported_products.add(new Supported_products('ticket restaurant','ERCZ_ECO'));
                this.supported_products.add(new Supported_products('edenred gift','ERCZ_BSK'));
                
                this.comments = '';
                
            }else if(anAcceptor.ER_Business_Unit__c == 'CZ'){
                
                
                this.authorization_aid = new Refs('os-card.authorizationaid.technical_id', (anAcceptor.ER_AID_Authorization__c != null) ? anAcceptor.ER_AID_Authorization__c : '');
                this.authorization_mcc = new Refs('os-card.authorizationmcc.technical_id', (anAcceptor.ER_MCC_Authorization__c != null) ? anAcceptor.ER_MCC_Authorization__c : '');
                this.authorization_tid = new Refs('os-card.authorizationtid.technical_id', (anAcceptor.ER_TID_Authorization__c != null) ? anAcceptor.ER_TID_Authorization__c : '');
                this.clearing_aid = new Refs('os-card.clearingaid.technical_id', (anAcceptor.ER_AID_Clearing__c != null) ? anAcceptor.ER_AID_Clearing__c : '');
                this.clearing_mcc = new Refs('os-card.clearingmcc.technical_id', (anAcceptor.ER_MCC_Clearing__c != null) ? anAcceptor.ER_MCC_Clearing__c : '');
                this.clearing_tid = new Refs('os-card.clearingtid.technical_id', (anAcceptor.ER_TID_Clearing__c != null) ? anAcceptor.ER_TID_Clearing__c : '');
                
            }
            
        }
    }
    
    
    public class Stores {
        
        public List <Refs> refs {get;set;}
        public String name {get;set;}
        public String brand_name {get;set;}
        public String description {get;set;}
        public Boolean is_publish {get;set;}
        public Boolean is_eshop {get;set;}
        public String location_center {get;set;}
        public String external_reference {get;set;}
        public DateTime created_date {get;set;}
        public String inactivation_date {get;set;}
        public Address address {get;set;}
        public List <Contacts> contacts {get;set;}
        public String sector_category_ref {get;set;}
        public List <String> activity_sectors {get;set;}
        public List <String> activity_domains {get;set;}
        public List<Acceptance_point> acceptance_points {get;set;}
        public List <invoice_centers_refs> invoice_centers_refs {get;set;}
        public List <Supported_products> supported_products {get;set;}
        public List <Supported_products> products {get;set;}
       
        /* not needed */
        public Stores(ER_Store__c store) {

            this.refs = new List <Refs> ();
            this.refs.add(new Refs('ds.store.technical_id', store.Id));
            this.name = store.Name;
            
            if(store.ER_Business_Unit__c == 'HU'){
                
                this.inactivation_date = '2018-01-01'; /* not needed */
                
                
                if (store.ER_Street__c != null && store.ER_City__c != null && store.ER_Zip_Code__c != null) {
                    
                    this.address = new Address('', store.ER_Street__c, '',
                                               store.ER_City__c, store.ER_Zip_Code__c, '',
                                               '', '', 'HU',
                                               '', double.valueOf('48.819947'), double.valueOf('2.309554'));
                }
                
                
                this.contacts = new List <Contacts> ();
                
                // Add the store contact of it exists
                if (store.ER_Contact__r != null) {                
                    this.contacts.add(new Contacts(store.ER_Contact__r.FirstName, store.ER_Contact__r.LastName, store.ER_Contact__r.Salutation, 
                                                   'primary contact', store.ER_Contact__r.Fax,
                                                   store.ER_Contact__r.Email, store.ER_Contact__r.Phone, store.ER_Contact__r.mobilePhone,
                                                   store.ER_Contact__r.MailingStreet, store.ER_Contact__r.MailingCity, store.ER_Contact__r.MailingPostalCode));
                }
                
                this.sector_category_ref = 'primary';
                this.activity_sectors = new List <String> ();
                this.activity_sectors.add('Agri-food');
                this.activity_sectors.add('Distribution');
                this.activity_domains = new List <String> ();
                this.activity_domains.add('');
                this.activity_domains.add('');
                
                this.acceptance_points = new List<Acceptance_point>();
                
                // Loop through the list of acceptors
                for (ER_Acceptor__c accept : store.Acceptors__r) {
                    this.acceptance_points.add(new Acceptance_point(accept, false));
                }
                
                
            }else if(store.ER_Business_Unit__c == 'CZ'){
                
                this.brand_name = (store.ER_Brand__c != null) ? store.ER_Brand__c : '';
                this.description = (store.ER_Description__c != null) ? store.ER_Description__c : '';
                this.is_publish = !store.ER_Do_not_publish__c;
                this.is_eshop = store.ER_E_Shop__c;
                this.external_reference = '7393798378';
                this.location_center = 'NC Pardubice';
                if(store.ER_Financial_Center__r.ER_Creation_date_in_OS__c != null)
                {
                    this.created_date = store.CreatedDate;
                }  
                system.debug('sdram2');
                if (store.ER_Street__c != null && store.ER_City__c != null && store.ER_Zip_Code__c != null) {
                    
                    this.address = new Address('', store.ER_Street__c, '',
                                                store.ER_City__c, store.ER_Zip_Code__c,'CZE', double.valueOf(store.ER_Latitude_Longitude__Latitude__s), double.valueOf(store.ER_Latitude_Longitude__Longitude__s));
                                               //store.ER_City__c, store.ER_Zip_Code__c,'CZE', double.valueOf('49.8069'), double.valueOf('18.2941'));
                }
               
                system.debug('sdram3');
                //if (store.ER_Contact__r != null) {                
                //this.contacts = new List <Contacts> ();
                //this.contacts.add(new Contacts('ds.contact.technical_id','381346670'));
                //}
                this.contacts = new List <Contacts> ();
                if (store.ER_Contact__r != null) {
                    
                   // this.contacts.add(new Contacts('ds.contact.technical_id', store.ER_Contact__r.Id));  
                    this.contacts.add(new Contacts(store.ER_Contact__r,'Owner'));  
                    
                }
                    
                    
                system.debug('sdram4');
                this.acceptance_points = new List<Acceptance_point>();
                system.debug('sdram5');
                // Loop through the list of acceptors
                for (ER_Acceptor__c accept : store.Acceptors__r) {
                    this.acceptance_points.add(new Acceptance_point(accept, false));
                }  
                system.debug('sdram6');
                this.products = new List <Supported_products> ();
                
                this.products.add(new Supported_products('ERCZ_ECO','ERCZ_ECO'));
                this.products.add(new Supported_products('ERCZ_BSK','ERCZ_BSK'));
                system.debug('sdram7');  
                
                this.invoice_centers_refs = new List<invoice_centers_refs>();
                this.invoice_centers_refs.add(new invoice_centers_refs('ds.invoicecenter.technical_id', store.ER_Financial_Center__c));    
                system.debug('sdram8');  
            }
            
        }
    }
    
    public class Invoice_centers {
        
        public List <Refs> refs {get;set;}
        public String name {get;set;}
        public String inactivation_date {get;set;}
        public String modified_by {get;set;}
        public Bank_account bank_account {get;set;}
        public Address address {get;set;}
        public List <Contacts> contacts {get;set;}
        public List <Stores> stores {get;set;}
        public String legal_name {get;set;}
        
        public Invoice_centers(ER_Financial_Center__c financialCenter, Contact invCont, List<ER_Store__c> storesToadd, ER_Bank_Account__c bankAccount, Boolean isFromAccount, Boolean isCreation) {
            
            String myInvoiceCenterId = financialCenter.Id;
            String mymerchantId = financialCenter.ER_Account_Name__c;
            
            this.refs = new List <Refs> ();
            this.refs.add(new Refs('ds.invoicecenter.technical_id', (financialCenter.Id != null) ? myInvoiceCenterId/*.substring(10, 18)*/ : 
                                   mymerchantId/*.substring(10, 18)*/));
            this.name = financialCenter.Name;

            if (financialCenter.Bank_Accounts__r != null && financialCenter.Bank_Accounts__r.size() > 0)
                this.bank_account = new Bank_account(financialCenter.Bank_Accounts__r[0], true); /* required */
            
              else 
                this.bank_account = new Bank_account(bankAccount, true); /* required */

            if(financialCenter.ER_Business_Unit__c == 'HU' )
            {
             /* required */
            this.refs.add(new Refs('os-paper.invoicecenter.technical_id', (financialCenter.Id != null) ? myInvoiceCenterId/*.substring(10, 18)*/ : 
                                   mymerchantId/*.substring(10, 18)*/)); /* required */
            
            this.inactivation_date = '2018-01-01'; /* not needed */
            
            /* related Bank Account 
* shoud be simplified  by 
*/
            
            if (financialCenter.ER_Street__c != null && financialCenter.ER_City__c != null && financialCenter.ER_Zip_Code__c != null) {
                
                this.address = new Address('', financialCenter.ER_Street__c, '',
                                           financialCenter.ER_City__c, financialCenter.ER_Zip_Code__c, '',
                                           '', '', 'HU',
                                           '', double.valueOf('48.819947'), double.valueOf('2.309554'));
            }
            
            /* only related to invoice center process - comming directly from the invoice center */
            if (isFromAccount || isCreation) {
                // 
                this.contacts = new List <Contacts> ();
                
                //this.legal_name = financialCenter.ER_Account_Name__r.Name;
                
                // check that the contact exists
                if (invCont != null) {
                    this.contacts.add(new Contacts(invCont.FirstName, invCont.LastName, invCont.Salutation, 
                                                   'primary contact', invCont.Fax,
                                                   invCont.Email, invCont.Phone, invCont.mobilePhone,
                                                   invCont.MailingStreet, invCont.MailingCity, invCont.MailingPostalCode));
                }
                
                
                
                /* in comment because this process is not validated */
                if (storesToadd !=  null) { // check if there is a store
                    this.stores = new List <Stores> ();
                    
                    for (ER_Store__c store : storesToadd) {
                        this.stores.add(new Stores(store));
                    }
                }
                
                if (isCreation) {
                    // On update only    
                    this.legal_name = financialCenter.ER_Account_Name__r.Name;
                }
                
            }
            else {
                this.modified_by = 'login';
            }
          } else if(financialCenter.ER_Business_Unit__c == 'CZ')
          {    
              
              
              
              if (financialCenter.ER_Street__c != null && financialCenter.ER_City__c != null && financialCenter.ER_Zip_Code__c != null) {
                
                this.address = new Address('', financialCenter.ER_Street__c, '',
                                               financialCenter.ER_City__c, financialCenter.ER_Zip_Code__c,'CZE', double.valueOf('49.8069'), double.valueOf('18.2941'));
                }
              
              this.contacts = new List <Contacts> ();
              if (isFromAccount || isCreation) {
                // 
                
                if (invCont != null) {
                    
                this.contacts.add(new Contacts(invCont, invCont.ER_Role__c));
              
                    }
                
 
              } 
              
              
               
          }
        }
    }
}